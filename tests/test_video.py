import unittest
from flask.testing import FlaskClient
from iiify.app import app

class TestVideo(unittest.TestCase):

    def setUp(self) -> None:
        self.test_app = FlaskClient(app)

    def test_v3_single_video_manifest(self):
        resp = self.test_app.get("/iiif/3/youtube-7w8F2Xi3vFw/manifest.json")
        self.assertEqual(resp.status_code, 200)
        manifest = resp.json

        self.assertEqual(len(manifest['items']),1,f"Expected 1 canvas but got: {len(manifest['items'])}")   

    def test_v3_h264_MPEG4_OGG_Theora(self):
        resp = self.test_app.get("/iiif/3/taboca_201002_03/manifest.json")
        self.assertEqual(resp.status_code, 200)
        manifest = resp.json
        self.assertEqual(len(manifest['items']),251,f"Expected 251 canvases but got: {len(manifest['items'])}")
        self.assertEqual("h.264 MPEG4".lower() in resp.text.lower(), True, f"Expected the string 'h.264 MPEG4'")
        self.assertEqual("OGG Theora".lower() in resp.text.lower(), True, f"Expected the string 'OGG Theora'")

    def test_vtt_autogenerated(self):
        resp = self.test_app.get("/iiif/3/youtube-SvH4fbjOT0A/manifest.json?recache=true")
        self.assertEqual(resp.status_code, 200)
        manifest = resp.json

        self.assertEqual(len(manifest['items']),1,f"Expected 1 canvas but got: {len(manifest['items'])}")
        self.assertTrue('annotations' in manifest['items'][0], "Expected annotations in manifest")
        self.assertTrue(isinstance(manifest['items'][0]['annotations'], list), "Expected annotations to be a list")
        self.assertEqual(len(manifest['items'][0]['annotations']), 1, "Expected 1 item in annotations")
        annotationPage = manifest['items'][0]['annotations'][0]
        self.assertEqual(annotationPage['type'], 'AnnotationPage', "Expected annotations to contain annotation page")

        self.assertTrue('items' in annotationPage and isinstance(annotationPage['items'],list) and len(annotationPage['items']) == 1, f"Expected annotation page to contain a list of items which contains 1 item. Found {annotationPage['items']}")
        annotation = annotationPage['items'][0]
        self.assertEqual(annotation['type'], 'Annotation', "Expected annotationPage to contain annotations")
        self.assertEqual(annotation['motivation'], 'supplementing', "Expected annotation to have the supplementing annotation")
        self.assertTrue('body' in annotation, "Expected annotation to have a body")
        body = annotation['body']
        self.assertEqual(body['type'],'Text', "Expected body to have a type text")
        self.assertEqual(body['format'],'text/vtt', "Expected body to have a type text")
        self.assertEqual(body['label']['en'][0], "autogenerated", "Expected VTT file to have the label autogenerated")
        self.assertFalse("language" in body, "We don't know the language for this item so there shouldn't be a language specified")
        self.assertEqual(body['id'], "https://archive.org/download/youtube-SvH4fbjOT0A/34C3_-_International_Image_Interoperability_Framework_IIIF_Kulturinstitutionen_schaffen_interop-SvH4fbjOT0A.autogenerated.vtt","Unexpected URL for the VTT file")


if __name__ == '__main__':
    unittest.main()